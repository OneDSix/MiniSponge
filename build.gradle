plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

project.version = '1.0.0' // Based off MiniMods 0.4.0
sourceCompatibility = 8
mainClassName = 'onedsix.loader.core.LoaderInitialization'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = [ "src/main/java/" ]
sourceSets.main.resources.srcDirs = ["src/main/resources/", "../assets/"]

repositories {
    gradlePluginPortal()
    mavenCentral()
    mavenLocal()
    google()

    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://jitpack.io" }
    maven { url "https://nexus.velocitypowered.com/repository/maven-public/" }
    maven { url 'https://maven.minecraftforge.net/' }
}

dependencies {
    // Main Loader dependencies.
    implementation "org.spongepowered:mixin:0.8.5"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    implementation "net.java.dev.jna:jna:5.12.1"
    implementation "net.java.dev.jna:jna-platform:5.12.1"
    implementation "com.github.oshi:oshi-core:6.2.2"
    api "com.electronwill.night-config:toml:3.6.0"
    runtimeOnly 'net.minecraftforge:accesstransformers:8.0.4'
    implementation 'org.apache.maven:maven-artifact:3.8.1'
	compileOnly "org.jetbrains:annotations:23.0.0"

	// JSON & TOML
	api 'org.json:json:20210307' // TODO: move from org.json:json to google:gson
	implementation "com.google.code.gson:gson:2.10.1"
	implementation 'com.moandjiezana.toml:toml4j:0.7.2'

	// Utilities
	implementation 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'

	// Logging
	implementation "org.slf4j:slf4j-api:1.7.32"
	implementation "ch.qos.logback:logback-classic:1.2.6"

    // Dependencies of SpongePowered:Mixin.
    api "org.ow2.asm:asm:9.3"
    api "org.ow2.asm:asm-tree:9.3"
    api "org.ow2.asm:asm-util:9.3"
    api "org.ow2.asm:asm-commons:9.3"
    api 'com.google.guava:guava:31.1-jre'
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
}

jar {

    delete(file("build/distributable"))
    file("build/distributable/lib").mkdirs()
    def paths = [];
    configurations.runtimeClasspath.each { dir ->
        def des = "lib/"
        paths.add(des + dir.getName())
        copy {
            from dir
            into "build/distributable/" + des
        }
    }

    archivesBaseName = "minimods"
    archiveClassifier.set('')

    manifest {
        attributes(
			'Main-Class': mainClassName,
			'Implementation-Title': project.name,
			'Implementation-Version': project.version,
			'SplashScreen-Image': "Minicraft_Splash_Screen_3.png",
			'Class-Path': String.join(" ", paths) // Adding class paths
		)
    }
}

shadowJar {
	distTar.enabled = false
	distZip.enabled = false
	shadowDistTar.enabled = false
	shadowDistZip.enabled = false

    archivesBaseName = "minimods"

    manifest {
        attributes(
			'Main-Class': mainClassName,
			'Implementation-Title': project.name,
			'Implementation-Version': project.version,
			'SplashScreen-Image': "Minicraft_Splash_Screen_3.png",
		)
    }
}
